"""
G√©n√©rateur de livrables pour le pipeline
G√®re la cr√©ation de rapports et pr√©sentations
"""

import logging
from typing import Dict, List, Any, Optional
from pathlib import Path
from datetime import datetime

logger = logging.getLogger(__name__)

class DeliverableGenerator:
    """Classe sp√©cialis√©e pour la g√©n√©ration de livrables"""

    def __init__(self, slide_generator, output_path: Path):
        self.slide_generator = slide_generator
        self.output_path = output_path

    async def generate_weekly_report(self, result) -> Path:
        """G√©n√®re le rapport hebdomadaire"""
        try:
            logger.info("üìä G√©n√©ration du rapport hebdomadaire")

            filename = f"weekly_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            filepath = self.output_path / filename

            # Simulation de g√©n√©ration
            with open(filepath, 'w') as f:
                f.write(f"Rapport hebdomadaire - {datetime.now()}\\n")
                f.write(f"Donn√©es analys√©es: {result.data_points_collected}\\n")
                f.write(f"Insights g√©n√©r√©s: {len(result.insights)}\\n")

            logger.info(f"‚úÖ Rapport hebdomadaire g√©n√©r√©: {filepath}")
            return filepath

        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration rapport hebdomadaire: {e}")
            raise

    async def generate_monthly_report(self, result) -> Path:
        """G√©n√®re le rapport mensuel"""
        try:
            logger.info("üìà G√©n√©ration du rapport mensuel")

            filename = f"monthly_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            filepath = self.output_path / filename

            # Simulation de g√©n√©ration
            with open(filepath, 'w') as f:
                f.write(f"Rapport mensuel - {datetime.now()}\\n")
                f.write("Analyse compl√®te du mois\\n")

            logger.info(f"‚úÖ Rapport mensuel g√©n√©r√©: {filepath}")
            return filepath

        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration rapport mensuel: {e}")
            raise

    async def generate_recommendation_slides(self, result, brief_path: str) -> Path:
        """G√©n√®re les slides de recommandations"""
        try:
            logger.info("üé® G√©n√©ration des slides de recommandations")

            filename = f"recommendations_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pptx"
            filepath = self.output_path / filename

            # Utiliser le g√©n√©rateur de slides
            slides_data = self._prepare_slides_data(result)
            # self.slide_generator.generate_presentation(slides_data, filepath)

            # Simulation
            with open(filepath, 'w') as f:
                f.write(f"Slides de recommandations - {datetime.now()}\\n")
                f.write(f"Nombre de slides: {len(slides_data)}\\n")

            logger.info(f"‚úÖ Slides g√©n√©r√©s: {filepath}")
            return filepath

        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration slides: {e}")
            raise

    async def generate_newsletter(self, result) -> Path:
        """G√©n√®re la newsletter"""
        try:
            logger.info("üìß G√©n√©ration de la newsletter")

            filename = f"newsletter_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
            filepath = self.output_path / filename

            # Simulation de g√©n√©ration
            with open(filepath, 'w') as f:
                f.write(f"<html><body>\\n")
                f.write(f"<h1>Newsletter - {datetime.now()}</h1>\\n")
                f.write(f"<p>Insights principaux: {len(result.insights)}</p>\\n")
                f.write(f"</body></html>\\n")

            logger.info(f"‚úÖ Newsletter g√©n√©r√©e: {filepath}")
            return filepath

        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration newsletter: {e}")
            raise

    def _prepare_slides_data(self, result) -> List[Dict]:
        """Pr√©pare les donn√©es pour les slides"""
        return [
            {
                'title': 'Vue d\'ensemble',
                'content': f'Analyse de {result.data_points_collected} points de donn√©es'
            },
            {
                'title': 'Tendances',
                'content': f'{len(result.trends)} tendances identifi√©es'
            },
            {
                'title': 'Recommandations',
                'content': 'Strat√©gies d\'optimisation'
            }
        ]
