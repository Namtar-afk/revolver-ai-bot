"""
Pr√©paration des donn√©es pour g√©n√©ration de slides
Extrait et structure les donn√©es du brief et de la veille
"""

import logging
from typing import Dict, List, Any
from datetime import datetime

logger = logging.getLogger(__name__)

class PresentationDataPreparator:
    """Pr√©pare et structure les donn√©es pour g√©n√©ration de slides"""

    def __init__(self):
        pass

    def prepare_presentation_data(self, data: Dict, style: Any) -> Dict:
        """Pr√©pare les donn√©es compl√®tes pour la pr√©sentation"""
        logger.info("üìä Preparing presentation data")

        prepared_data = {
            'brand_name': data.get('brand_name', 'Unknown Brand'),
            'sector': data.get('sector', 'General'),
            'project_type': data.get('project_type', 'Marketing Campaign'),
            'timestamp': datetime.now().isoformat(),
            'style': style,
        }

        # Extraction des insights du brief
        brief_insights = self._extract_brief_insights(data)
        prepared_data.update(brief_insights)

        # Extraction des donn√©es de veille
        if 'veille_data' in data:
            veille_insights = self._extract_veille_insights(data['veille_data'])
            prepared_data.update(veille_insights)

        # G√©n√©ration des id√©es et priorit√©s
        prepared_data['strategic_priorities'] = self._generate_strategic_priorities(data)
        prepared_data['ideas'] = self._generate_ideas(data)

        return prepared_data

    def _extract_brief_insights(self, data: Dict) -> Dict[str, Any]:
        """Extrait les insights du brief"""
        return {
            'brand_story': data.get('brand_story', ''),
            'target_audience': data.get('target_audience', ''),
            'objectives': data.get('objectives', []),
            'challenges': data.get('challenges', []),
            'budget': data.get('budget', 0),
            'timeline': data.get('timeline', ''),
        }

    def _extract_veille_insights(self, veille_data: Dict) -> Dict[str, Any]:
        """Extrait les insights de la veille"""
        return {
            'market_insights': self._extract_market_insights(veille_data),
            'competitive_landscape': self._extract_competitive_landscape(veille_data),
            'consumer_trends': self._extract_consumer_trends(veille_data),
            'opportunities': self._extract_opportunities(veille_data),
        }

    def _extract_market_insights(self, veille_data: Dict) -> str:
        """Extrait les insights march√©"""
        insights = veille_data.get('insights', [])
        market_data = veille_data.get('market_data', {})

        if insights:
            return f"March√© en croissance avec {len(insights)} insights cl√©s identifi√©s"

        return "Analyse de march√© en cours"

    def _extract_competitive_landscape(self, veille_data: Dict) -> str:
        """Extrait le paysage concurrentiel"""
        competitors = veille_data.get('competitors', [])

        if competitors:
            return f"{len(competitors)} concurrents identifi√©s dans le secteur"

        return "Analyse concurrentielle en cours"

    def _extract_consumer_trends(self, veille_data: Dict) -> str:
        """Extrait les tendances consommateurs"""
        trends = veille_data.get('trends', [])

        if trends:
            return f"{len(trends)} tendances consommateurs identifi√©es"

        return "Analyse des tendances en cours"

    def _extract_opportunities(self, veille_data: Dict) -> str:
        """Extrait les opportunit√©s"""
        return "Opportunit√©s identifi√©es dans l'analyse de veille"

    def _generate_strategic_priorities(self, data: Dict) -> List[str]:
        """G√©n√®re les priorit√©s strat√©giques"""
        return [
            "D√©velopper la pr√©sence digitale",
            "Optimiser l'engagement client",
            "Innover dans les services",
            "Renforcer la notori√©t√© de marque"
        ]

    def _generate_ideas(self, data: Dict) -> List[Dict]:
        """G√©n√®re des id√©es cr√©atives"""
        return [
            {
                'title': 'Campagne Digital Innovation',
                'description': 'Campagne multi-canal mettant en avant l\'innovation technologique',
                'impact': 'High',
                'effort': 'Medium'
            },
            {
                'title': 'Contenu Authentique',
                'description': 'Cr√©ation de contenu authentique racontant des histoires vraies',
                'impact': 'High',
                'effort': 'Low'
            }
        ]
